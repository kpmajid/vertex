<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="Responsive Admin &amp; Dashboard Template based on Bootstrap 5" />
    <meta name="author" content="AdminKit" />
    <meta name="keywords"
        content="adminkit, bootstrap, bootstrap 5, admin, dashboard, template, responsive, css, sass, html, theme, front-end, ui kit, web" />

    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link rel="shortcut icon" href="img/icons/icon-48x48.png" />

    <link rel="canonical" href="https://demo-basic.adminkit.io/" />

    <title>AdminKit Demo - Bootstrap 5 Admin Template</title>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@4/dist/css/bootstrap.min.css" crossorigin="anonymous" />

    <link rel="stylesheet" href="/css/cropper.css" />

    <link href="/admin/css/app.css" rel="stylesheet" />
    <link href="css/sample.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.css" />
    <link href="/admin/css/uploadImage.css" rel="stylesheet" />
    <style>
        .img-container img {
            max-width: 100%;
        }
    </style>
</head>

<body>
    <div class="wrapper">
        <nav id="sidebar" class="sidebar js-sidebar">
            <div class="sidebar-content js-simplebar">
                <a class="sidebar-brand" href="/admin/dashboard">
                    <span class="align-middle">Vertex</span>
                </a>
                <ul class="sidebar-nav">
                    <li class="sidebar-header">Menu</li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/dashboard">
                            <span class="align-middle">Dashboard</span>
                        </a>
                    </li>

                    <li class="sidebar-item active">
                        <a class="sidebar-link" href="/admin/products">
                            <span class="align-middle">Products</span>
                        </a>
                    </li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/category">
                            <span class="align-middle">Category</span>
                        </a>
                    </li>


                    <!-- <li class="sidebar-item ">
                        <a class="sidebar-link" href="/admin/attributes">
                            <span class="align-middle">Attributes</span>
                        </a>
                    </li> -->

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/orders">
                            <span class="align-middle">Orders</span>
                        </a>
                    </li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/discount">
                            <span class="align-middle">Discount</span>
                        </a>
                    </li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/coupon">
                            <span class="align-middle">Coupon</span>
                        </a>
                    </li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/transaction">
                            <span class="align-middle">Transaction</span>
                        </a>
                    </li>

                    <li class="sidebar-header">User Mangement</li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/users">
                            <span class="align-middle">Users</span>
                        </a>
                    </li>

                    <li class="sidebar-header">Other</li>

                    <li class="sidebar-item">
                        <a class="sidebar-link" href="/admin/logout">
                            <span class="align-middle">Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>

        <div class="main">
            <nav class="navbar navbar-expand navbar-light navbar-bg">
                <a class="sidebar-toggle js-sidebar-toggle">
                    <i class="hamburger align-self-center"></i>
                </a>

                <div class="navbar-collapse collapse">
                    <ul class="navbar-nav navbar-align"></ul>
                </div>
            </nav>

            <main class="content">
                <form id="addProduct" enctype="multipart/form-data">
                    <div class="container-fluid p-0">
                        <div class="row pb-3">
                            <div class="d-flex justify-content-between">
                                <h1 class="h3 mb-3" style="width: fit-content">
                                    <strong>Add Products</strong>
                                </h1>
                                <div>
                                    <button type="button" id="cancel-product" class="btn btn-outline-secondary btn-md">
                                        Cancel
                                    </button>
                                    <button type="button" id="add-product" class="btn btn-success btn-md">
                                        Add Product
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="">
                                <div class="card flex-fill w-100">
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="name" class="form-label">Product Name</label>
                                            <input id="name" name="name" type="text" class="form-control"
                                                placeholder="Type product name here" />
                                            <div id="nameErrorMessage" class="text-danger mt-2"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="description" class="form-label">Description</label>
                                            <textarea id="description" name="description" class="form-control" rows="3 "
                                                placeholder="Type product description here"></textarea>
                                            <div id="descriptionErrorMessage" class="text-danger mt-2"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="price" class="form-label">Base Price</label>
                                            <input id="price" name="price" type="text" class="form-control"
                                                placeholder="Type basse price here" />
                                            <div id="priceErrorMessage" class="text-danger mt-2"></div>
                                        </div>
                                        <div class="mb-3">
                                            <span class="form-label">Photo</span>
                                            <div id="preview-container">
                                                <p class="m-0" id="preview-container-p">click and add image</p>
                                                <div id="imageErrorMessage" class="text-danger"></div>
                                                <label for="imageInput" class="btn btn-outline-primary"
                                                    id="custom-button">Add Image</label>
                                                <input type="file" name="productImages" id="imageInput" />
                                                <div class="preview-images" id="preview-images"></div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="col mt-0">
                                                <h5 class="card-title">Category</h5>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <div class="col-6 pe-2">
                                                    <label for="topLevelCategory" class="form-label">Parent
                                                        Category</label>
                                                    <select name="topLevel" id="topLevelCategory"
                                                        class="form-select mb-3">
                                                        <option selected disabled value="0">
                                                            Select Category
                                                        </option>
                                                        <% categories.forEach(category=> { %>
                                                            <option value="<%= category._id%>">
                                                                <%= category.name%>
                                                            </option>
                                                            <% }) %>
                                                    </select>
                                                    <div id="parentCateErrorMessage" class="text-danger mt-2"></div>
                                                </div>
                                                <div class="col-6">
                                                    <label for="subCategory" class="form-label">Sub Category</label>
                                                    <select name="subCategory" id="subCategory"
                                                        class="form-select mb-3">
                                                        <option selected disabled>
                                                            1st Select main category
                                                        </option>
                                                    </select>
                                                    <div id="subCateErrorMessage" class="text-danger mt-2"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="row">
                                                <div class="col mt-0">
                                                    <h5 class="card-title">Variants</h5>
                                                </div>
                                            </div>
                                            <span class="form-label">Color</span>

                                            <div>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="white" />
                                                    <span class="form-check-label"> White </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="black" />
                                                    <span class="form-check-label"> Black </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="red" />
                                                    <span class="form-check-label"> Red </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="green" />
                                                    <span class="form-check-label"> Green </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="yellow" />
                                                    <span class="form-check-label"> Yellow </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="color" type="checkbox"
                                                        onchange="updateOptions()" value="blue" />
                                                    <span class="form-check-label"> Blue </span>
                                                </label>
                                            </div>
                                            <div id="colorErrorMessage" class="text-danger mt-2"></div>

                                            <span class="form-label">Size</span>
                                            <div>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="size" type="checkbox"
                                                        onchange="updateOptions()" value="small" />
                                                    <span class="form-check-label"> Small </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="size" type="checkbox"
                                                        onchange="updateOptions()" value="medium" />
                                                    <span class="form-check-label"> Medium </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="size" type="checkbox"
                                                        onchange="updateOptions()" value="large" />
                                                    <span class="form-check-label"> Large </span>
                                                </label>
                                                <label class="form-check form-check-inline">
                                                    <input class="form-check-input" name="size" type="checkbox"
                                                        onchange="updateOptions()" value="extraLarge" />
                                                    <span class="form-check-label"> Extra Large </span>
                                                </label>
                                            </div>
                                            <div id="sizeErrorMessage" class="text-danger mt-2"></div>
                                        </div>
                                        <div class="mb-3">
                                            <div id="variantBoxes"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </main>
            <div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="modalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="modalLabel">
                                Cropper
                            </h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"> <span
                                    aria-hidden="true">&times;</span></button>
                        </div>


                        <div class="modal-body">
                            <div class="img-container">
                                <img id="cropper-image" src="" alt="" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">
                                Close
                            </button>
                            <button type="button" class="btn btn-primary" id="crop-image-button">
                                Crop
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/jquery@3/dist/jquery.slim.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.min.js"></script>
    <script src="/js/cropper.js"></script>
    <script>
        function updateOptions() {
            // Get selected variants, colors, and sizes
            let colors = Array.from(
                document.querySelectorAll('input[name="color"]:checked')
            ).map((input) => input.value);
            let sizes = Array.from(
                document.querySelectorAll('input[name="size"]:checked')
            ).map((input) => input.value);

            // Clear previous variant boxes
            let variantBoxes = document.getElementById("variantBoxes");
            variantBoxes.innerHTML = "";

            // Create new variant boxes based on selected options
            variantBoxes.classList.add("d-flex");
            variantBoxes.classList.add("flex-wrap");
            for (let color of colors) {
                for (let size of sizes) {
                    let variantBox = document.createElement("div");
                    variantBox.classList.add("px-1");

                    const strongElement = document.createElement("strong");
                    strongElement.textContent = `${size}-${color}`;

                    // Create the <label> element and append the <strong> element to it
                    const labelElement = document.createElement("label");
                    labelElement.appendChild(strongElement);

                    // Create the <input> element
                    const inputElement = document.createElement("input");
                    inputElement.id = `quantity_${color}_${size}`;
                    inputElement.name = "quantity";
                    inputElement.type = "text";
                    inputElement.placeholder = "Enter quantity";
                    inputElement.classList.add("form-control");
                    inputElement.min = 0;

                    // Create the <div> element for the error message
                    const errorDiv = document.createElement("div");
                    errorDiv.classList.add(
                        "variantErrorMessage",
                        "text-danger",
                        "mt-2"
                    );

                    // Append the elements to the main variantBox container
                    variantBox.appendChild(labelElement);
                    variantBox.appendChild(inputElement);
                    variantBox.appendChild(errorDiv);

                    variantBoxes.appendChild(variantBox);

                    // Set dataset attributes for color and size
                    inputElement.dataset.color = color;
                    inputElement.dataset.size = size;
                }
            }
        }

        let cropper;
        const addedFiles = [];
        let count = 0;
        let formData = new FormData();
        let imageName;
        const maxImages = 4;

        const initialize = () => {
            initializeSimplebar();
            initializeSidebarCollapse();

            // initializeAddProduct();
            document
                .getElementById("imageInput")
                .addEventListener("change", handleFileSelect);

            document
                .getElementById("crop-image-button")
                .addEventListener("click", cropImage);

            $('#modal').on('hidden.bs.modal', function () {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });

            document
                .getElementById("add-product")
                .addEventListener("click", addProduct);

            async function addProduct() {
                event.preventDefault();

                let isValid = true


                const name = document.getElementById("name");
                if (!name.value.trim()) {
                    nameErrorMessage.textContent = "Please enter product name.";
                    isValid = false
                } else {
                    nameErrorMessage.textContent = "";
                }

                const description = document.getElementById("description");
                if (!description.value.trim()) {
                    descriptionErrorMessage.textContent =
                        "Please enter product description.";
                    isValid = false
                } else {
                    descriptionErrorMessage.textContent = "";
                }

                const price = document.getElementById("price");
                var priceValue = parseFloat(price.value);
                if (!price.value.trim()) {
                    priceErrorMessage.textContent = "Please enter product price.";
                    isValid = false
                } else if (priceValue < 1 || isNaN(priceValue)) {
                    priceErrorMessage.textContent = "Please enter valid product price.";
                    isValid = false
                } else {
                    priceErrorMessage.textContent = "";
                }

                if (addedFiles.length < 4) {
                    imageErrorMessage.textContent = "Please add 4 images";
                    isValid = false
                } else {
                    imageErrorMessage.textContent = "";
                }

                const parentCategory = document.getElementById("topLevelCategory");
                if (parentCategory.value == 0) {
                    parentCateErrorMessage.textContent =
                        "Please Select Parent Category.";
                    isValid = false
                } else {
                    parentCateErrorMessage.textContent = "";
                }

                const subCategory = document.getElementById("subCategory");
                if (subCategory.value == 0) {
                    subCateErrorMessage.textContent = "Please Select Sub Category.";
                    isValid = false
                } else {
                    subCateErrorMessage.textContent = "";
                }



                const colorCheckboxes = document.querySelectorAll(
                    'input[name="color"]:checked'
                );
                if (colorCheckboxes.length < 1) {
                    colorErrorMessage.textContent = "Please Select Atleast one color.";
                    isValid = false
                } else {
                    colorErrorMessage.textContent = "";
                }

                const sizeCheckboxes = document.querySelectorAll(
                    'input[name="size"]:checked'
                );
                if (sizeCheckboxes.length < 1) {
                    sizeErrorMessage.textContent = "Please Select Atleast one size.";
                    isValid = false
                } else {
                    sizeErrorMessage.textContent = "";
                }

                const quantityInputs = document.querySelectorAll(
                    'input[name="quantity"]'
                );
                const variantErrorMessages = document.querySelectorAll(
                    ".variantErrorMessage"
                );

                const combinations = [];

                let index = 0;
                colorCheckboxes.forEach(function (colorCheckbox) {
                    sizeCheckboxes.forEach(function (sizeCheckbox) {
                        const color = colorCheckbox.value;
                        const size = sizeCheckbox.value;
                        const quantityInput = getMatchingQuantityInput(
                            quantityInputs,
                            color,
                            size
                        );
                        if (quantityInput.value == "") {
                            variantErrorMessages[index].textContent = "Please Enter the variant quantity";
                            isValid = false
                        } else {
                            variantErrorMessages[index].textContent = "";
                        }

                        const combination = {
                            color: color,
                            size: size,
                            quantity: quantityInput ? quantityInput.value : null,
                        };
                        combinations.push(combination);
                        index++;
                    });
                });

                if (!isValid) {
                    return
                }

                try {


                    // let formData = new FormData();
                    formData.append("name", name.value);
                    formData.append("description", description.value);
                    formData.append("price", price.value);
                    formData.append("parentCategory", parentCategory.value);
                    formData.append("subCategory", subCategory.value);
                    formData.append("combinations", JSON.stringify(combinations));

                    // for (let i = 0; i < addedFiles.length; i++) {
                    //     formData.append("images[]", addedFiles[i]);
                    // }

                    // formData.forEach((value, key) => {
                    //     console.log(`${value}`);
                    // });
                    const response = await fetch("/admin/add-product", {
                        method: "POST",
                        body: formData,
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const data = await response.json();
                    window.location.href = "/admin/products";
                } catch (error) {
                    console.log(error);
                }
            }

            function getMatchingQuantityInput(quantityInputs, color, size) {
                return Array.from(quantityInputs).find(function (input) {
                    return input.dataset.color === color && input.dataset.size === size;
                });
            }

            document
                .getElementById("cancel-product")
                .addEventListener("click", function () {
                    window.location.href = "/admin/products";
                });


            const topLevelCategorySelect =
                document.getElementById("topLevelCategory");

            const subCategorySelect = document.getElementById("subCategory");
            topLevelCategorySelect.addEventListener("change", async () => {
                try {
                    const parentId = topLevelCategorySelect.value;
                    console.log(parentId)
                    if (parentId != "" && parentId != "0") {
                        const response = await fetch("/admin/subcategory", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({ parentId }),
                        });
                        const data = await response.json();
                        const subCategories = data.subCategories;
                        subCategorySelect.innerHTML = `<option selected disabled value="0">Select sub category</option>`;
                        subCategories.forEach((subCategory) => {
                            const option = document.createElement("option");
                            option.textContent = subCategory.name;
                            option.value = subCategory._id;
                            subCategorySelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.log(error);
                }
            });
        };

        const initializeSimplebar = () => {
            const simplebarElement =
                document.getElementsByClassName("js-simplebar")[0];

            if (simplebarElement) {
                const simplebarInstance = new SimpleBar(
                    document.getElementsByClassName("js-simplebar")[0]
                );

                /* Recalculate simplebar on sidebar dropdown toggle */
                const sidebarDropdowns = document.querySelectorAll(
                    ".js-sidebar [data-bs-parent]"
                );

                sidebarDropdowns.forEach((link) => {
                    link.addEventListener("shown.bs.collapse", () => {
                        simplebarInstance.recalculate();
                    });
                    link.addEventListener("hidden.bs.collapse", () => {
                        simplebarInstance.recalculate();
                    });
                });
            }
        };

        const initializeSidebarCollapse = () => {
            const sidebarElement = document.getElementsByClassName("js-sidebar")[0];
            const sidebarToggleElement =
                document.getElementsByClassName("js-sidebar-toggle")[0];

            if (sidebarElement && sidebarToggleElement) {
                sidebarToggleElement.addEventListener("click", () => {
                    sidebarElement.classList.toggle("collapsed");

                    sidebarElement.addEventListener("transitionend", () => {
                        window.dispatchEvent(new Event("resize"));
                    });
                });
            }
        };

        //crop

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (!file) {
                return
            }
            if (cropper) {
                console.log("cropper")
                console.log(cropper)
            }

            imageName = file.name;


            if (addedFiles.length >= maxImages) {
                alert(`You can add up to ${maxImages} images.`);
                event.target.value = "";

                document.getElementById("custom-button").style.display = "none";
                document.getElementById("preview-container-p").style.display = "none";
                return;
            }

            $("#cropper-image").attr("src", URL.createObjectURL(file));
            $("#modal").on("shown.bs.modal", initializeCropper);
            $("#modal").modal("show");

        }

        function initializeCropper() {
            var image = document.getElementById("cropper-image");

            if (cropper) {
                destroyCropper()
                console.log("cropper initializeCropper")
                console.log(cropper)
            }

            cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
            });

        }

        function cropImage() {

            $("#modal").modal("hide");
            $("#cropper-image").attr("src", "");

            if (!cropper) {
                alert("No cropper initialized.");
                return;
            }

            canvas = cropper.getCroppedCanvas({
                width: 550,
                height: 550,
            });

            canvas.toBlob(function (blob) {
                formData.append(`images[${count}]`, blob, imageName);
                addedFiles.push(`images[${count}]`)
                previewFile(canvas.toDataURL(), `images[${count}]`);
                count++;
                if (addedFiles.length >= maxImages) {
                    document.getElementById("custom-button").style.display = "none";
                    document.getElementById("preview-container-p").style.display = "none";
                }
            })

            destroyCropper()
        }

        function destroyCropper() {
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        function previewFile(file, fileName) {
            const maxImages = 4;
            const previewImagesContainer =
                document.getElementById("preview-images");

            const imageContainer = document.createElement("div");
            imageContainer.classList.add("preview-image-container");

            const image = new Image();
            image.src = file;
            image.classList.add("preview-image");

            const removeButton = document.createElement("button");
            removeButton.innerText = "Remove";
            removeButton.addEventListener("click", () => {
                previewImagesContainer.removeChild(imageContainer);

                const index = addedFiles.findIndex((name) => name === fileName);

                if (index !== -1) {
                    formData.delete(fileName);
                    addedFiles.splice(index, 1);
                }

                if (addedFiles.length < maxImages) {
                    document.getElementById("custom-button").style.display =
                        "inline-block";
                    document.getElementsByTagName("p")[0].style.display =
                        "inline-block";
                }
            });

            imageContainer.appendChild(image);
            imageContainer.appendChild(removeButton);

            previewImagesContainer.appendChild(imageContainer);


        }


        document.addEventListener("DOMContentLoaded", () => initialize());
    </script>
</body>

</html>