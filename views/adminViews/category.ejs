<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta name="description" content="Responsive Admin &amp; Dashboard Template based on Bootstrap 5" />
  <meta name="author" content="AdminKit" />
  <meta name="keywords"
    content="adminkit, bootstrap, bootstrap 5, admin, dashboard, template, responsive, css, sass, html, theme, front-end, ui kit, web" />

  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link rel="shortcut icon" href="img/icons/icon-48x48.png" />

  <link rel="canonical" href="https://demo-basic.adminkit.io/" />

  <title>Vertex</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous" />
  <link href="css/app.css" rel="stylesheet" />
  <link href="css/sample.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet" />
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

  <link rel="stylesheet" href="https://cdn.datatables.net/2.0.2/css/dataTables.dataTables.css">
  <style>
    .dt-layout-row {
      padding: 6px;
    }

    #dt-length-0 {
      margin-right: 6px;
    }
  </style>
  <style>
    /* Internal (inline) style */
    .accordion-button:focus {
      /* border-color: transparent; */
      box-shadow: none;
      /* or border-color: initial; or border-color: unset; */
    }

    .swal2-select {
      border: 1px solid #d9d9d9;
      border-radius: 0.1875em;
      background: rgba(0, 0, 0, 0);
      min-width: 76%;
    }

    .swal2-input,
    .swal2-select {
      margin: 5px 2em 0px;
    }
  </style>
</head>

<body>
  <div class="wrapper">
    <nav id="sidebar" class="sidebar js-sidebar">
      <div class="sidebar-content js-simplebar">
        <a class="sidebar-brand" href="/admin/dashboard">
          <span class="align-middle">Vertex</span>
        </a>
        <ul class="sidebar-nav">
          <li class="sidebar-header">Menu</li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/dashboard">
              <span class="align-middle">Dashboard</span>
            </a>
          </li>

          <li class="sidebar-item ">
            <a class="sidebar-link" href="/admin/sales">
              <span class="align-middle">Sales</span>
            </a>
          </li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/products">
              <span class="align-middle">Products</span>
            </a>
          </li>

          <li class="sidebar-item active">
            <a class="sidebar-link" href="/admin/category">
              <span class="align-middle">Category</span>
            </a>
          </li>


          <!-- <li class="sidebar-item ">
            <a class="sidebar-link" href="/admin/attributes">
              <span class="align-middle">Attributes</span>
            </a>
          </li> -->

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/orders">
              <span class="align-middle">Orders</span>
            </a>
          </li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/offers">
              <span class="align-middle">Offer</span>
            </a>
          </li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/coupon">
              <span class="align-middle">Coupon</span>
            </a>
          </li>



          <li class="sidebar-header">User Mangement</li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/users">
              <span class="align-middle">Users</span>
            </a>
          </li>

          <li class="sidebar-header">Other</li>

          <li class="sidebar-item">
            <a class="sidebar-link" href="/admin/logout">
              <span class="align-middle">Logout</span>
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <div class="main">
      <nav class="navbar navbar-expand navbar-light navbar-bg">
        <a class="sidebar-toggle js-sidebar-toggle">
          <i class="hamburger align-self-center"></i>
        </a>

        <div class="navbar-collapse collapse">
          <ul class="navbar-nav navbar-align"></ul>
        </div>
      </nav>

      <main class="content">
        <div class="row pb-3">
          <div class="container-fluid justify-content-between d-flex">
            <h1 class="h3 mb-3" style="width: fit-content">
              <strong>Categories</strong>
            </h1>
            <div>
              <button id="add-category" class="btn btn-md btn-primary">
                Add Category
              </button>
            </div>
          </div>
        </div>
        <div class="card flex-fill w-100">
          <div class="table-responsive-sm">
            <table id="myTable" class="table text-center table-hover my-0 display" style="width:100%">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Type</th>
                  <th>offer</th>
                  <th>remove offer</th>
                  <th>status</th>
                  <th>edit</th>
                </tr>
              </thead>
              <tbody>
                <% if (categories.length <=0) { %>
                  <tr>
                    <td colspan="5">No Category</td>
                  </tr>
                  <% } else { %>
                    <% categories.forEach(category=> { %>
                      <tr>
                        <td class="name">
                          <%= category.display_name %>
                        </td>
                        <td>
                          <% if (category.isParentCategory) { %> Parent Category <% }else {%> Child Category <% } %>
                        </td>
                        <td>
                          <% if(!category.discount){%>
                            <button type="button" class="apply-offer btn btn-success btn-md"
                              data-categoryId="<%= category._id%>">
                              Apply
                            </button>
                            <%}else{%>
                              <%= category.discount.name %>,<%= category.discount.value%>%off <%} %>
                        </td>

                        <td>
                          <% if(!category.discount){%> no offers <%}else{%>
                              <button type="button" class="remove-offer btn btn-success btn-md"
                                data-categoryId="<%= category._id%>">
                                remove
                              </button>
                              <%} %>
                        </td>
                        <td class="">
                          <% if (category.status=="listed" ) { %>
                            <button type="button" class="list-ulist-btn btn btn-danger btn-md"
                              data-categoryId="<%= category._id%>" data-action="Unlist">
                              Unlist
                            </button>

                            <% } else { %>

                              <button type="button" class="list-ulist-btn btn btn-success btn-md"
                                data-categoryId="<%= category._id%>" data-action="List">
                                List
                              </button>

                              <% } %>
                        </td>
                        <td>
                          <div class="col-auto">
                            <div id="edit-category-btn" class="edit-btn btn edit" data-categoryId="<%= category._id%>"
                              data-categoryName="<%= category.name%>">
                            </div>
                            <a href="/admin/edit-category/<%= category._id %>"> </a>
                          </div>
                        </td>

                      </tr>
                      <% }) %>
                        <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </main>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
    integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.min.js"></script>

  <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
  <script src="https://cdn.datatables.net/2.0.2/js/dataTables.js"></script>





  <script>
    const initialize = () => {

      initializeSimplebar();
      initializeSidebarCollapse();

      new DataTable('#myTable', {
        ordering: false,
      });

      // Get all elements with the class '.dt-orderable-none'
      var elements = document.querySelectorAll('.dt-orderable-none');

      // Loop through each element and set its text-align property to 'center'
      elements.forEach(function (element) {
        element.style.textAlign = 'center';
      });

      document
        .getElementById("add-category")
        .addEventListener("click", function () {
          window.location.href = "add-category";
        });

      const applyOffereBtns = document.querySelectorAll(".apply-offer");
      applyOffereBtns.forEach((applyBtn) => {
        applyBtn.addEventListener("click", () => applyOffer(applyBtn));
      });

      const removeOfferBtns = document.querySelectorAll(".remove-offer")
      removeOfferBtns.forEach(removeBtn => {
        removeBtn.addEventListener("click", () => removeOffer(removeBtn))
      })

      const listUnlistBtns = document.querySelectorAll(".list-ulist-btn");
      listUnlistBtns.forEach((button) => {
        button.addEventListener("click", () => listUnlist(button))
      })

      const editBtns = document.querySelectorAll(".edit-btn")
      editBtns.forEach((button) => {
        button.addEventListener("click", (e) => editCategory(button, e))
      })
    };

    async function editCategory(button, e) {
      try {
        console.log(button)

        let categoryId = button.getAttribute("data-categoryid")
        let categoryName = button.getAttribute("data-categoryname")


        let url = `/admin/edit-category/${categoryId}`
        const { value: name } = await Swal.fire({
          title: "Edit Category",
          input: "text",
          inputLabel: "Your category name",
          inputValue: categoryName,
          showCancelButton: true,
          inputValidator: (name) => {
            console.log("inputValidator")
            if (!name) {
              return "Name can't be empty!";
            }
          },
          preConfirm: async (name) => {
            const response = await fetch(url, {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name,
              }),
            });
            if (!response.ok) {
              const jsonData = await response.json();
              console.log(jsonData);
              return Swal.showValidationMessage(`${jsonData.message}`);
            }
            if (response.ok) {
              console.log()
              await Swal.fire({
                title: `Edited!`,
                text: `${categoryName} category has been edited.`,
                icon: "success",
              });
              window.location.reload();
            }
          },
        });
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: `Something went wrong!
                ${error}      
          `,
        });
      }
    }


    async function listUnlist(button) {
      const categoryId = button.getAttribute("data-categoryid");
      const action = button.getAttribute("data-action")
      const url = `/api/admin/categories/${categoryId}`;
      try {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: `do you want ${action} ${name} category!`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: `Yes, ${action} it!`,
        });
        if (result.isConfirmed) {
          const response = await fetch(url, {
            method: "PATCH",
          });

          if (response.ok) {
            await Swal.fire({
              title: `${action}ed!`,
              text: `${name} category has been ${action}ed.`,
              icon: "success",
            });
            window.location.reload();
          }
        }
      } catch (error) {
        console.log(error);
      }
    }


    async function applyOffer(button) {
      const categoryId = button.getAttribute("data-categoryid");
      const response = await fetch("/admin/getOffers");
      if (response.ok) {
        const data = await response.json();
        const { offers } = data;
        if (offers.length <= 0) {
          await Swal.fire({
            title: "No Offers",
            text: "Please add offers in offers page.",
            icon: "error",
          });
          return;
        }
        let inputData = {};
        offers.forEach((offer) => {
          inputData[offer._id] = offer.name;
        });
        console.log(inputData);

        Swal.fire({
          title: "Select Offers",
          input: "select",
          inputOptions: inputData,
          inputPlaceholder: "Select a offer",
          showCancelButton: true,
          inputValidator: (value) => {
            return new Promise((resolve) => {
              if (!value) {
                resolve(`You have to select offer.`);
              } else {
                resolve();
              }
            });
          },
        }).then((result) => {
          if (result.isConfirmed) {
            console.log(result);
            fetch("/admin/apply-category-offer", {
              method: "POST",
              headers: {
                "content-Type": "application/json",
              },
              body: JSON.stringify({ categoryId, offerId: result.value }),
            })
              .then((response) => {
                if (response.ok) {
                  Swal.fire("Saved!", "", "success").then(() => {
                    window.location.reload();
                  });
                }
              })
              .catch((error) => {
                Swal.fire({
                  icon: "error",
                  title: "Oops...",
                  text: "Something went wrong!",
                  timer: 1500,
                });
              });
          }
        });
      }
    }


    async function removeOffer(button) {
      try {
        console.log(button)
        const categoryId = button.getAttribute("data-categoryId")
        Swal.fire({
          title: "Do you want to remove the offer?",
          showCancelButton: true,
          confirmButtonText: "Remove",
        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {
            console.log(categoryId)
            fetch("/admin/remove-category-offer", {
              method: "POST",
              headers: {
                "content-Type": "application/json"
              },
              body: JSON.stringify({ categoryId })
            }).then((response) => {
              if (response.ok) {
                Swal.fire("Remved!", "", "success").then(() => {
                  window.location.reload()
                });;
              }
            }).catch((error) => {
              Swal.fire({
                icon: "error",
                title: "Oops...",
                text: "Something went wrong!",
              });
            })
          }
        });
      } catch (error) {
        console.log(error)
      }
    }


    const initializeSimplebar = () => {
      const simplebarElement =
        document.getElementsByClassName("js-simplebar")[0];

      if (simplebarElement) {
        const simplebarInstance = new SimpleBar(
          document.getElementsByClassName("js-simplebar")[0]
        );

        /* Recalculate simplebar on sidebar dropdown toggle */
        const sidebarDropdowns = document.querySelectorAll(
          ".js-sidebar [data-bs-parent]"
        );

        sidebarDropdowns.forEach((link) => {
          link.addEventListener("shown.bs.collapse", () => {
            simplebarInstance.recalculate();
          });
          link.addEventListener("hidden.bs.collapse", () => {
            simplebarInstance.recalculate();
          });
        });
      }
    };

    const initializeSidebarCollapse = () => {
      const sidebarElement = document.getElementsByClassName("js-sidebar")[0];
      const sidebarToggleElement =
        document.getElementsByClassName("js-sidebar-toggle")[0];

      if (sidebarElement && sidebarToggleElement) {
        sidebarToggleElement.addEventListener("click", () => {
          sidebarElement.classList.toggle("collapsed");

          sidebarElement.addEventListener("transitionend", () => {
            window.dispatchEvent(new Event("resize"));
          });
        });
      }
    };


    document.addEventListener("DOMContentLoaded", () => initialize());
  </script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>